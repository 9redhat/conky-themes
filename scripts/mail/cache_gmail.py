#!/usr/bin/env python2
# -*- coding: UTF-8 -*-
#
# Get the number of new e-mails from one's GMail account
# You need:
#  - a GPG key
#  - to set ${GPGKEY} accordingly (e.g. ABCD1234)
#  - to set ${EMAIL} with your GMail e-mail address (e.g. bob@gmail.com)
#  - ~/.dotfiles/gmail.dat that can be generated by putting your password in
#    a file "my_file" and:
#        gpg --output ~/.dotfiles/gmail.dat -r ${GPGKEY} --encrypt my_file
#    Remember to delete "my_file" afterwards...

import sys,os, imaplib, subprocess
import email
import argparse

from email.header import decode_header
from os.path import expanduser

port = 993
server = 'imap.gmail.com'

home = expanduser("~")
cache_dir = home + "/.cache/conky/"
encrypted_pw_fname= "~/.dotfiles/gmail.dat"
#encrypted_pw_fname= home + "/.dotfiles/gmail.dat"

def cap(s, l):
    return s if len(s)<=l else s[0:l-3]+'...'

def getSubject(data):
    msg = email.message_from_string(data[0][1])
    dh = decode_header(msg['subject'])
    default_charset = 'ASCII'
    subject = ''.join([ unicode(t[0], t[1] or default_charset) for t in dh ])
    return cap(subject, 28)

def setError(get_error, msg):
    if get_error:
        return "Error: " + msg
    else:
        return ""

def setNumber(get_number, n):
    if get_number:
        return str(n)
    else:
        return str(-1)

def setSubject(get_subject, s):
    if get_subject:
        return str(s)
    else:
        return ""

def getResult(n,msg,error):
    return str(n) + "\n" + str(msg) + "\n" + str(error) + "\n"

def getMail(get_number, get_subject, get_error):
    # Result file contains: res_n, res_msg, res_error
    res_n = -1
    res_msg = ""
    res_error = ""

    # Find username
    username = os.environ.get ('EMAIL')
    if username == None:
        res_error = setError (get_error, "${EMAIL} not set")
        return getResult (res_n,res_msg,res_error)

    # Find GPG key
    gpgkey = os.environ.get ('GPGKEY')
    if gpgkey == None:
        res_error = setError (get_error, "${GPGKEY} not set")
        return getResult (res_n,res_msg,res_error)

    # Decrypt password
    passwd=""
    if not os.path.isfile (encrypted_pw_fname):
        proc = subprocess.Popen (["gpg -q --no-tty --use-agent --batch -r "
                                  + gpgkey + " --decrypt " + encrypted_pw_fname],
                                 stdout=subprocess.PIPE, shell=True)
        (passwd, err) = proc.communicate()

        if passwd == "":
            res_error = setError (get_error, "could not decrypt password (" + encrypted_pw_fname + ")")
            return getResult (res_n,res_msg,res_error)

        # Strip '\n'
        passwd = passwd.strip ()
    else:
        res_error = setError (get_error, "missing GPG encrypted password (" + encrypted_pw_fname + ")")
        return getResult (res_n,res_msg,res_error)

    # Prepare connection to IMAP server
    try:
        imap_server = imaplib.IMAP4_SSL (server, port)
    except:
        # No internet connexion
        res_error = setError (get_error, "no internet connexion")
        return getResult (res_n,res_msg,res_error)

    # Try to log in
    try:
        imap_server.login (username, passwd)
    except:
        # Error: check that IMAP is activated in GMail
        res_error = setError (get_error, 'login failed')
        return getResult (res_n,res_msg,res_error)

    typ, data = imap_server.select ('Inbox', readonly=True)
    if typ == 'OK':
        typ, data = imap_server.search (None, 'UNSEEN')
        if typ == 'OK':
            id_list = data[0].split ()
            if id_list != []:
                unseen = len (id_list)
                res_n = setNumber(get_number, unseen)
                typ, data = imap_server.fetch(id_list[-1],'(RFC822)')
                try:
                    subject = getSubject(data)
                    res_msg = setSubject(get_subject, subject)
                except:
                    res_msg = setSubject(get_subject, "")
            else:
                res_n = setNumber(get_number, 0)

    if typ != 'OK':
        res_error = setError (get_error, 'unknown error')

    imap_server.logout ()

    return getResult (res_n,res_msg,res_error)


def main(**kwargs):
    # Debug: check key/values provided by argparse
    #for key, value in kwargs.iteritems():
    #    print key, value

    get_number = kwargs['number']
    get_subject = kwargs['last_subject']
    get_error = kwargs['error']

    # Store the result in ~/.cache/conky/gmail.txt
    res = getMail (get_number, get_subject, get_error)
    if not os.path.exists (cache_dir):
        os.makedirs (cache_dir)
    f = open (cache_dir + '/gmail.txt','w')
    f.write (res)
    f.close ()


if __name__ == '__main__':
    # Parse arguments
    parser = argparse.ArgumentParser(description='Get Gmail data for Conky',
                                     version='%(prog)s 0.1')
    parser.add_argument('-n','--number', action='store_true', default=False,
                        help='return the number of new e-mails')
    parser.add_argument('-l','--last-subject', action='store_true', default=False,
                        help='return the subject of the last unread e-mail')
    parser.add_argument('-e','--error', action='store_true', default=False,
                        help='return the error message (if any)')
    args = parser.parse_args()
    main(**vars(args))

    try:
        sys.stdout.close()
    except:
        pass
    try:
        sys.stderr.close()
    except:
        pass